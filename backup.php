<?php
// This file is generated by Composer
require_once __DIR__ . '/vendor/autoload.php';

$backupDir = __DIR__ . '/backup/';
if (!file_exists($backupDir)) mkdir($backupDir);

$client = new \Github\Client();

$client->authenticate(file_get_contents(__DIR__ . "/API_TOKEN"), "", Github\Client::AUTH_HTTP_TOKEN);
$currentUser = $client->api('current_user')->show();
$userName = $currentUser['login'];
out("Running simple GitHub Backup for User " . $userName);

$repos = $client->api('current_user')->repositories();

foreach($repos as $repo) {
  $repoName = $repo['name'];

  $gitUrl = $repo['ssh_url'];
  $branch = 'master';

  if (file_exists($backupDir . $repoName . '/.git')) {
    out($repoName . " exists - getting branches");
    $branches = [];
    exec('cd ' . $backupDir . $repoName . ' && git fetch && git branch -a', $branches);
    foreach ($branches as $branch) {
      if (!strstr($branch, 'remotes/origin') || strstr($branch, '->')) continue;

      list($foo, $branchName) = explode('remotes/origin/', trim($branch));

      out("Pulling changes for branch " . $branchName);
      $output = shell_exec('cd ' . $backupDir . $repoName . ' && git checkout ' . $branchName . ' 2>&1 && git reset --hard origin/' . $branchName . ' 2>&1 && git pull 2>&1');
      out($output);
    }

  } else {
    out($repoName . " exists - cloning " . $gitUrl . " ...");
    $output = shell_exec('git clone ' . $gitUrl . ' ' . $backupDir . $repoName);
    out($output);
  }


  // issues
  out("Fetching issues for " . $repoName . " ...");
  $issues = $client->api('issue')->all($userName, $repoName, array('state' => 'open'));

  foreach ($issues as $issue) {
    out("Fetching issue details for #" . $issue['number']);
    $issueDetails = $client->api('issue')->show($userName, $repoName, $issue['number']);
    if (!file_exists($backupDir . '/issues/' . $repoName . '/')) mkdir($backupDir . '/issues/' . $repoName . '/', 0777, TRUE);
    file_put_contents($backupDir . '/issues/' . $repoName . '/' . $issue['number'] . '.json', json_encode($issueDetails, JSON_PRETTY_PRINT));

    if ($issue['comments'] > 0) {
      out("Fetching comments for issue #" . $issue['number'] . " ... ");
      $comments = $client->api('issue')->comments()->all($userName, $repoName, $issue['number']);
      file_put_contents($backupDir . '/issues/' . $repoName . '/' . $issue['number'] . '.comments.json', json_encode($comments, JSON_PRETTY_PRINT));
    }
  }
}

out("Finished.\n");


function out($text) {
  echo "\n" . date('c') . ' ' . $text;
}

//print_r($repos);
